{
  "Query 1": {
    "description": "Find products that are classified as ready mixed concrete.",
    "query": "PREFIX ilcd: <https://example.org/ilcd/>\nPREFIX ex:   <https://example.org/canonical/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\n\nSELECT ?Product ?Category ?Database \nWHERE {\n  # Retrieve the product name (English)\n  ?dsInfo a ilcd:DataSetInformation ;\n          ilcd:dataSetName ?dsName ;\n          ilcd:classificationInformation ?ci .\n  ?dsName ilcd:baseName ?baseName .\n  ?baseName ilcd:value ?Product ;\n            ilcd:lang \"en\" .\n  \n  # Choose one classification that has a \"beton\" entry (via the canonical mapping)\n  ?ci ilcd:classification ?class .\n  ?class ilcd:classEntries ?entry .\n  ?entry ex:hasCanonicalCategory ex:CanonicalCategory_3 .\n  \n  # Optionally get the classification system name, renamed as Database\n  OPTIONAL { ?class ilcd:name ?Database . }\n  \n  # Optionally build the ordered category chain for that classification\n  OPTIONAL {\n    SELECT ?class (GROUP_CONCAT(?chainItem; separator=\" > \") AS ?Category)\n    WHERE {\n      {\n        SELECT ?class ?chainItem ?level\n        WHERE {\n          ?class ilcd:classEntries ?e .\n          ?e ilcd:value ?chainItem ;\n             ilcd:level ?level .\n        }\n        ORDER BY ASC(?level)\n      }\n    }\n    GROUP BY ?class\n  }\n}\nORDER BY ?Product"
  },

  "Query 2": {
    "description": "Find concrete products and calculate their global warming potential score.",
    "query": "PREFIX ilcd: <https://example.org/ilcd/>\nPREFIX ex:   <https://example.org/canonical/>\nPREFIX skos: <http://www.w3.org/2004/02/skos/core#>\nPREFIX xsd:  <http://www.w3.org/2001/XMLSchema#>\n\nSELECT ?name (ROUND(SUM(?numVal)*10)/10 AS ?lciaSumRounded) ?unit\nWHERE {\n  # Step 1: Start from the ProcessDataSet node\n  ?pd a ilcd:ProcessDataSet ;\n      ilcd:lciaResults ?lciaRes ;\n      ilcd:processInformation ?pInfo .\n  \n  # Step 2: Link ProcessInformation to DataSetInformation\n  ?pInfo ilcd:dataSetInformation ?dsi .\n  \n  # Step 3: Filter datasets by classification (\"beton\" canonical)\n  ?dsi ilcd:classificationInformation ?classInfo .\n  ?classInfo ilcd:classification ?class .\n  ?class ilcd:classEntries ?entry .\n  ?entry ex:hasCanonicalCategory ex:CanonicalCategory_3 .\n  \n  # Step 4: Get the English product name\n  ?dsi ilcd:dataSetName ?dsName .\n  ?dsName ilcd:baseName ?baseName .\n  ?baseName ilcd:value ?name ;\n            ilcd:lang \"en\" .\n  \n  # Step 5: Sum the LCIA values for the LCIAResults on this ProcessDataSet\n  ?lciaRes ilcd:LCIAResult ?lciaResEntry .\n  ?lciaResEntry ilcd:otherLCIA ?otherLCIA .\n  ?otherLCIA ilcd:anies ?module .\n  ?module ilcd:value ?val .\n  FILTER(?val != \"ND\")\n  BIND(xsd:float(?val) AS ?numVal)\n  \n  # Step 6: Filter LCIA method data set by short description (for Global Warming Potential - total)\n  ?lciaResEntry ilcd:referenceToLCIAMethodDataSet ?method .\n  ?method ilcd:shortDescription ?mShort .\n  ?mShort ilcd:value ?mShortVal .\n  FILTER(regex(STR(?mShortVal), \"global warming potential - total\", \"i\"))\n  \n  # Step 7: Optionally, get the unit (if available)\n  OPTIONAL {\n    ?otherLCIA ilcd:anies ?um .\n    ?um ilcd:name \"referenceToUnitGroupDataSet\" .\n    ?um ilcd:objectValue ?unitObj .\n    ?unitObj ilcd:shortDescription ?unitDesc .\n    ?unitDesc ilcd:value ?unit\n  }\n}\nGROUP BY ?name ?unit\nORDER BY ?lciaSumRounded"
  }
}
